//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Unity.Services.CloudSave.Internal.Models;
using Unity.Services.CloudSave.Internal.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.CloudSave.Internal.Files;
using UnityEngine;

namespace Unity.Services.CloudSave.Internal.Apis.Files
{
    /// <summary>
    /// Interface for the FilesApiClient
    /// </summary>
    internal interface IFilesApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Delete a Player File.
            /// </summary>
            /// <param name="request">Request object for DeleteFile.</param>
            /// <param name="operationConfiguration">Configuration for DeleteFile.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteFileAsync(Unity.Services.CloudSave.Internal.Files.DeleteFileRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a player file download URL.
            /// </summary>
            /// <param name="request">Request object for GetDownloadUrl.</param>
            /// <param name="operationConfiguration">Configuration for GetDownloadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<SignedUrlResponse>> GetDownloadUrlAsync(Unity.Services.CloudSave.Internal.Files.GetDownloadUrlRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get the metadata of a file.
            /// </summary>
            /// <param name="request">Request object for GetFileMetadata.</param>
            /// <param name="operationConfiguration">Configuration for GetFileMetadata.</param>
            /// <returns>Task for a Response object containing status code, headers, and FileItem object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<FileItem>> GetFileMetadataAsync(Unity.Services.CloudSave.Internal.Files.GetFileMetadataRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a player file upload URL.
            /// </summary>
            /// <param name="request">Request object for GetUploadUrl.</param>
            /// <param name="operationConfiguration">Configuration for GetUploadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<SignedUrlResponse>> GetUploadUrlAsync(Unity.Services.CloudSave.Internal.Files.GetUploadUrlRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List files.
            /// </summary>
            /// <param name="request">Request object for ListFiles.</param>
            /// <param name="operationConfiguration">Configuration for ListFiles.</param>
            /// <returns>Task for a Response object containing status code, headers, and FileList object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<FileList>> ListFilesAsync(Unity.Services.CloudSave.Internal.Files.ListFilesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Uploads a file to the given GCS pre-signed URL.
            /// </summary>
            /// <param name="stream">Stream containing file content to be uploaded to GCS.</param>
            /// <param name="uploadParams">Parameters for the GCS upload.</param>
            /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UploadFileAsync(Stream stream, SignedUrlResponse uploadParams, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Uploads a file to the given GCS pre-signed URL.
            /// </summary>
            /// <param name="bytes">Byte array containing file content to be uploaded to GCS.</param>
            /// <param name="uploadParams">Parameters for the GCS upload.</param>
            /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UploadFileAsync(byte[] bytes, SignedUrlResponse uploadParams, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Downloads a file from the given GCS pre-signed URL.
            /// </summary>
            /// <param name="downloadParams">Parameters for the download from GCS.</param>
            /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and Stream object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<MemoryStream>> DownloadFileStreamAsync(SignedUrlResponse downloadParams, Configuration operationConfiguration = null);

            // <summary>
            /// Async Operation.
            /// Downloads a file from the given GCS pre-signed URL.
            /// </summary>
            /// <param name="downloadParams">Parameters for the download from GCS.</param>
            /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
            /// <returns>Task for a Response object containing status code, headers, and byte array containing file.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<byte[]>> DownloadFileBytesAsync(SignedUrlResponse downloadParams, Configuration operationConfiguration = null);
    }

    ///<inheritdoc cref="IFilesApiClient"/>
    internal class FilesApiClient : BaseApiClient, IFilesApiClient
    {
        private IAccessToken m_accessToken;
        private const int k_baseTimeout = 10;
        private Configuration m_configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("http://cloud-save.service:9045", 10, 4, null);
                return Configuration.MergeConfigurations(m_configuration, globalConfiguration);
            }
            set { m_configuration = value; }
        }

        /// <summary>
        /// FilesApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for FilesApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> FilesApiClient Configuration object.</param>
        public FilesApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            m_configuration = configuration;

            m_accessToken = accessToken;
        }

        /// <summary>
        /// Async Operation.
        /// Delete a Player File.
        /// </summary>
        /// <param name="request">Request object for DeleteFile.</param>
        /// <param name="operationConfiguration">Configuration for DeleteFile.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteFileAsync(Unity.Services.CloudSave.Internal.Files.DeleteFileRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetFileMetadata400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"409", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(m_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get a player file download URL.
        /// </summary>
        /// <param name="request">Request object for GetDownloadUrl.</param>
        /// <param name="operationConfiguration">Configuration for GetDownloadUrl.</param>
        /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<SignedUrlResponse>> GetDownloadUrlAsync(Unity.Services.CloudSave.Internal.Files.GetDownloadUrlRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(SignedUrlResponse)   },{"400", typeof(GetFileMetadata400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(m_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<SignedUrlResponse>(response, statusCodeToTypeMap);
            return new Response<SignedUrlResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get the metadata of a file.
        /// </summary>
        /// <param name="request">Request object for GetFileMetadata.</param>
        /// <param name="operationConfiguration">Configuration for GetFileMetadata.</param>
        /// <returns>Task for a Response object containing status code, headers, and FileItem object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<FileItem>> GetFileMetadataAsync(Unity.Services.CloudSave.Internal.Files.GetFileMetadataRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(FileItem)   },{"400", typeof(GetFileMetadata400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(m_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<FileItem>(response, statusCodeToTypeMap);
            return new Response<FileItem>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get a player file upload URL.
        /// </summary>
        /// <param name="request">Request object for GetUploadUrl.</param>
        /// <param name="operationConfiguration">Configuration for GetUploadUrl.</param>
        /// <returns>Task for a Response object containing status code, headers, and SignedUrlResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<SignedUrlResponse>> GetUploadUrlAsync(Unity.Services.CloudSave.Internal.Files.GetUploadUrlRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(SignedUrlResponse)   },{"400", typeof(GetFileMetadata400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(m_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<SignedUrlResponse>(response, statusCodeToTypeMap);
            return new Response<SignedUrlResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List files.
        /// </summary>
        /// <param name="request">Request object for ListFiles.</param>
        /// <param name="operationConfiguration">Configuration for ListFiles.</param>
        /// <returns>Task for a Response object containing status code, headers, and FileList object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<FileList>> ListFilesAsync(Unity.Services.CloudSave.Internal.Files.ListFilesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(FileList)   },{"400", typeof(GetFileMetadata400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(m_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<FileList>(response, statusCodeToTypeMap);
            return new Response<FileList>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Uploads a file to the given GCS pre-signed URL.
        /// </summary>
        /// <param name="stream">Stream containing the file content to be uploaded to GCS.</param>
        /// <param name="uploadParams">Parameters for the upload to GCS.</param>
        /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
        /// <returns>Task for a Response object containing status code and headers.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UploadFileAsync(Stream stream, SignedUrlResponse uploadParams, Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", null   },{"412", typeof(GCSErrorResponse)   }};

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            // Content-Length is automatically managed and so does not need to be set.
            uploadParams.RequiredHeaders.Remove("Content-Length");

            byte[] bytes;
            using (var ms = new MemoryStream())
            {
                stream.CopyTo(ms);
                bytes = ms.ToArray();
            }

            var response = await HttpClient.MakeRequestAsync(uploadParams.HttpMethod,
                uploadParams.SignedUrl,
                bytes,
                uploadParams.RequiredHeaders,
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Uploads a file to the given GCS pre-signed URL.
        /// </summary>
        /// <param name="bytes">Byte array containing the file content to be uploaded to GCS.</param>
        /// <param name="uploadParams">Parameters for the upload to GCS.</param>
        /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
        /// <returns>Task for a Response object containing status code and headers.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UploadFileAsync(byte[] bytes, SignedUrlResponse uploadParams, Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", null   },{"412", typeof(GCSErrorResponse)   }};

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            // Content-Length is automatically managed and so does not need to be set.
            uploadParams.RequiredHeaders.Remove("Content-Length");

            var response = await HttpClient.MakeRequestAsync(uploadParams.HttpMethod,
                uploadParams.SignedUrl,
                bytes,
                uploadParams.RequiredHeaders,
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Downloads a file from the given GCS pre-signed URL.
        /// </summary>
        /// <param name="downloadParams">Parameters for the download from GCS.</param>
        /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
        /// <returns>Task for a Response object containing status code, headers, and Stream object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<MemoryStream>> DownloadFileStreamAsync(SignedUrlResponse downloadParams, Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(System.IO.Stream)   },{"404", typeof(GCSErrorResponse)   }};

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync(downloadParams.HttpMethod,
                downloadParams.SignedUrl,
                null,
                new Dictionary<string, string>(),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<MemoryStream>(response, statusCodeToTypeMap);
            return new Response<MemoryStream>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Downloads a file from the given GCS pre-signed URL.
        /// </summary>
        /// <param name="downloadParams">Parameters for the download from GCS.</param>
        /// <param name="operationConfiguration">Configuration for CreatePlayerUploadUrl.</param>
        /// <returns>Task for a Response object containing status code, headers, and byte array containing file.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<byte[]>> DownloadFileBytesAsync(SignedUrlResponse downloadParams, Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(System.IO.Stream)   },{"404", typeof(GCSErrorResponse)   }};

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync(downloadParams.HttpMethod,
                downloadParams.SignedUrl,
                null,
                new Dictionary<string, string>(),
                finalConfiguration.RequestTimeout ?? k_baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<MemoryStream>(response, statusCodeToTypeMap);
            var bytes = handledResponse.ToArray();
            return new Response<byte[]>(response, bytes);
        }

    }
}
