//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudSave.Internal.Http;



namespace Unity.Services.CloudSave.Internal.Models
{
    /// <summary>
    /// The request body for querying an index
    /// </summary>
    [Preserve]
    [DataContract(Name = "QueryIndexBody")]
    internal class QueryIndexBody
    {
        /// <summary>
        /// The request body for querying an index
        /// </summary>
        /// <param name="fields">fields param</param>
        /// <param name="returnKeys">The keys to return in the response. This can include keys not on the index. If not specified or empty, the data on the results will be empty for any returned entities.</param>
        /// <param name="offset">The number of results to skip. Defaults to 0.</param>
        /// <param name="limit">The maximum number of results to return. Defaults to 10. Specifying 0 will return the default number of results.</param>
        [Preserve]
        public QueryIndexBody(List<FieldFilter> fields, List<string> returnKeys = default, int offset = default, int limit = default)
        {
            Fields = fields;
            ReturnKeys = returnKeys;
            Offset = offset;
            Limit = limit;
        }

        /// <summary>
        /// Parameter fields of QueryIndexBody
        /// </summary>
        [Preserve]
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public List<FieldFilter> Fields{ get; }
        
        /// <summary>
        /// The keys to return in the response. This can include keys not on the index. If not specified or empty, the data on the results will be empty for any returned entities.
        /// </summary>
        [Preserve]
        [DataMember(Name = "returnKeys", EmitDefaultValue = false)]
        public List<string> ReturnKeys{ get; }
        
        /// <summary>
        /// The number of results to skip. Defaults to 0.
        /// </summary>
        [Preserve]
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset{ get; }
        
        /// <summary>
        /// The maximum number of results to return. Defaults to 10. Specifying 0 will return the default number of results.
        /// </summary>
        [Preserve]
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit{ get; }
    
        /// <summary>
        /// Formats a QueryIndexBody into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Fields != null)
            {
                serializedModel += "fields," + Fields.ToString() + ",";
            }
            if (ReturnKeys != null)
            {
                serializedModel += "returnKeys," + ReturnKeys.ToString() + ",";
            }
            serializedModel += "offset," + Offset.ToString() + ",";
            serializedModel += "limit," + Limit.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a QueryIndexBody as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ReturnKeys != null)
            {
                var returnKeysStringValue = ReturnKeys.ToString();
                dictionary.Add("returnKeys", returnKeysStringValue);
            }
            
            var offsetStringValue = Offset.ToString();
            dictionary.Add("offset", offsetStringValue);
            
            var limitStringValue = Limit.ToString();
            dictionary.Add("limit", limitStringValue);
            
            return dictionary;
        }
    }
}
