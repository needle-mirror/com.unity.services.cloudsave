//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.CloudSave.Internal.Http;



namespace Unity.Services.CloudSave.Internal.Models
{
    /// <summary>
    /// FileItem model
    /// </summary>
    [Preserve]
    [DataContract(Name = "file-item")]
    internal class FileItem
    {
        /// <summary>
        /// Creates an instance of FileItem.
        /// </summary>
        /// <param name="size">size param</param>
        /// <param name="created">created param</param>
        /// <param name="modified">modified param</param>
        /// <param name="writeLock">writeLock param</param>
        /// <param name="contentType">contentType param</param>
        /// <param name="key">key param</param>
        [Preserve]
        public FileItem(long size, ModifiedMetadata created, ModifiedMetadata modified, string writeLock, string contentType, string key = default)
        {
            Size = size;
            Created = created;
            Modified = modified;
            WriteLock = writeLock;
            ContentType = contentType;
            Key = key;
        }

        /// <summary>
        /// Parameter size of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size{ get; }

        /// <summary>
        /// Parameter created of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public ModifiedMetadata Created{ get; }

        /// <summary>
        /// Parameter modified of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "modified", IsRequired = true, EmitDefaultValue = true)]
        public ModifiedMetadata Modified{ get; }

        /// <summary>
        /// Parameter writeLock of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "writeLock", IsRequired = true, EmitDefaultValue = true)]
        public string WriteLock{ get; }

        /// <summary>
        /// Parameter contentType of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType{ get; }

        /// <summary>
        /// Parameter key of FileItem
        /// </summary>
        [Preserve]
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key{ get; }

        /// <summary>
        /// Formats a FileItem into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "size," + Size + ",";
            if (Created != null)
            {
                serializedModel += "created," + Created.ToString() + ",";
            }
            if (Modified != null)
            {
                serializedModel += "modified," + Modified.ToString() + ",";
            }
            if (WriteLock != null)
            {
                serializedModel += "writeLock," + WriteLock + ",";
            }
            if (ContentType != null)
            {
                serializedModel += "contentType," + ContentType + ",";
            }
            if (Key != null)
            {
                serializedModel += "key," + Key;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a FileItem as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var sizeStringValue = Size.ToString();
            dictionary.Add("size", sizeStringValue);
            if (WriteLock != null)
            {
                var writeLockStringValue = WriteLock.ToString();
                dictionary.Add("writeLock", writeLockStringValue);
            }

            if (ContentType != null)
            {
                var contentTypeStringValue = ContentType.ToString();
                dictionary.Add("contentType", contentTypeStringValue);
            }

            if (Key != null)
            {
                var keyStringValue = Key.ToString();
                dictionary.Add("key", keyStringValue);
            }

            return dictionary;
        }
    }
}
